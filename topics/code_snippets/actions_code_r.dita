<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="reference_h23_m4l_fvb">
    <title>Actions Code Snippets</title>
    <shortdesc>View the python code that is generated when you create the actions for the content
        definition.</shortdesc>
    <refbody>
        <section id="section_lv2_q4l_fvb">
            <title>Create</title>
            <p>The python code generated when creating a <parmname>description</parmname> action is
                as
                follows:<codeblock id="codeblock_pqr_t4l_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoCreate generated by Altair One content definition compiler.
# ToDoCreatePre  [optional] precheck and setup resources required for action.
# ToDoCreateRun  business logic of action and set outputs.
# ToDoCreatePost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoCreateInputs
from altair.todo import ToDoCreateOutputs
from altair.todo.ToDo import ToDo


async def ToDoCreateRun(inputs: ToDoCreateInputs, outputs: ToDoCreateOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoCreateInputs): action inputs
        outputs (ToDoCreateOutputs): action outputs
        context (ActionContext): action context
    '''
    # Creating the todo instance
    todo = ToDo(session=context.session)
    
    # Update the attributes
    todo.description = inputs.description
    todo.category = inputs.category
    todo.status = 'Pending'
    await context.session.save()

    # Emit the ToDo create event
    await todo.emitToDoCreatedEvent(todoRef=todo)

    # Assign the todo object to the output content
    outputs.content = todo</codeblock></p>
        </section>
        <section id="section_u24_3ql_fvb">
            <title>GetAll</title>
            <p>The python code generated when creating a <parmname>status</parmname> action is as
                follows:<codeblock id="codeblock_fmw_jql_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoGetAll generated by Altair One content definition compiler.
# ToDoGetAllPre  [optional] precheck and setup resources required for action.
# ToDoGetAllRun  business logic of action and set outputs.
# ToDoGetAllPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoGetAllInputs
from altair.todo import ToDoGetAllOutputs
from altair.system import Search


async def ToDoGetAllRun(inputs: ToDoGetAllInputs, outputs: ToDoGetAllOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoGetAllInputs): action inputs
        outputs (ToDoGetAllOutputs): action outputs
        context (ActionContext): action context
    '''
    result = await Search.search(session=context.session, filter= 'system.contentType in ["altair.todo.ToDo"]')
    outputs.todos = result.entities</codeblock></p>
        </section>
        <section id="section_z41_kql_fvb">
            <title>Delete</title>
            <p>The python code generated when creating a <parmname>category</parmname> action is as
                follows:<codeblock id="codeblock_qlh_lql_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoDelete generated by Altair One content definition compiler.
# ToDoDeletePre  [optional] precheck and setup resources required for action.
# ToDoDeleteRun  business logic of action and set outputs.
# ToDoDeletePost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoDeleteInputs
from altair.todo import ToDoDeleteOutputs


async def ToDoDeleteRun(inputs: ToDoDeleteInputs, outputs: ToDoDeleteOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoDeleteInputs): action inputs
        outputs (ToDoDeleteOutputs): action outputs
        context (ActionContext): action context
    '''
    await inputs.thisContent.delete()
    await inputs.thisContent.emitToDoDeletedEvent(todoId=inputs.thisContent.id)
    outputs.status = True</codeblock></p>
        </section>
        <section id="section_zkt_qyl_fvb">
            <title>MarkAsCompleted</title>
            <p>The python code generated when creating a <parmname>MarkAsCompleted</parmname> action
                is as
                follows:<codeblock id="codeblock_rmn_5yl_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoMarkAsComplete generated by Altair One content definition compiler.
# ToDoMarkAsCompletePre  [optional] precheck and setup resources required for action.
# ToDoMarkAsCompleteRun  business logic of action and set outputs.
# ToDoMarkAsCompletePost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoMarkAsCompleteInputs
from altair.todo import ToDoMarkAsCompleteOutputs


async def ToDoMarkAsCompleteRun(inputs: ToDoMarkAsCompleteInputs, outputs: ToDoMarkAsCompleteOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoMarkAsCompleteInputs): action inputs
        outputs (ToDoMarkAsCompleteOutputs): action outputs
        context (ActionContext): action context
    '''
    inputs.thisContent.status = 'Completed'
    outputs.status = True
    await inputs.thisContent.emitToDoModifiedEvent(todoRef=inputs.thisContent)</codeblock></p>
        </section>
        <section id="section_zhr_vyl_fvb">
            <title>MarkAsPending</title>
            <p>The python code generated when creating a <parmname>MarkAsPending</parmname> action
                is as
                follows:<codeblock id="codeblock_off_xyl_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoMarkAsPending generated by Altair One content definition compiler.
# ToDoMarkAsPendingPre  [optional] precheck and setup resources required for action.
# ToDoMarkAsPendingRun  business logic of action and set outputs.
# ToDoMarkAsPendingPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoMarkAsPendingInputs
from altair.todo import ToDoMarkAsPendingOutputs


async def ToDoMarkAsPendingRun(inputs: ToDoMarkAsPendingInputs, outputs: ToDoMarkAsPendingOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoMarkAsPendingInputs): action inputs
        outputs (ToDoMarkAsPendingOutputs): action outputs
        context (ActionContext): action context
    '''
    inputs.thisContent.status = 'Pending'
    outputs.status = True
    await inputs.thisContent.emitToDoModifiedEvent(todoRef=inputs.thisContent)</codeblock></p>
        </section>
        <section id="section_pnk_xyl_fvb">
            <title>GetPending</title>
            <p>The python code generated when creating a <parmname>GetPending</parmname> action is
                as
                follows:<codeblock id="codeblock_zdr_yyl_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoGetPending generated by Altair One content definition compiler.
# ToDoGetPendingPre  [optional] precheck and setup resources required for action.
# ToDoGetPendingRun  business logic of action and set outputs.
# ToDoGetPendingPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoGetPendingInputs
from altair.todo import ToDoGetPendingOutputs
from altair.system import Search


async def ToDoGetPendingRun(inputs: ToDoGetPendingInputs, outputs: ToDoGetPendingOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoGetPendingInputs): action inputs
        outputs (ToDoGetPendingOutputs): action outputs
        context (ActionContext): action context
    '''
    result = await Search.search(session=context.session, 
                                 filter= 'status like "Pending" &amp;&amp; system.contentType in ["altair.todo.ToDo"]'
                                )
    outputs.pendingToDos = result.entities</codeblock></p>
        </section>
        <section id="section_hc5_yyl_fvb">
            <title>GetCompleted</title>
            <p>The python code generated when creating a <parmname>GetPending</parmname> action is
                as
                follows:<codeblock id="codeblock_n2q_zyl_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoGetCompleted generated by Altair One content definition compiler.
# ToDoGetCompletedPre  [optional] precheck and setup resources required for action.
# ToDoGetCompletedRun  business logic of action and set outputs.
# ToDoGetCompletedPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoGetCompletedInputs
from altair.todo import ToDoGetCompletedOutputs
from altair.system import Search


async def ToDoGetCompletedRun(inputs: ToDoGetCompletedInputs, outputs: ToDoGetCompletedOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoGetCompletedInputs): action inputs
        outputs (ToDoGetCompletedOutputs): action outputs
        context (ActionContext): action context
    '''
    result = await Search.search(session=context.session, 
                                 filter= 'status like "Completed" &amp;&amp; system.contentType in ["altair.todo.ToDo"]'
                                )
                                
    outputs.completedToDos = result.entities</codeblock></p>
        </section>
        <section id="section_hcv_nzl_fvb">
            <title>GetNotes</title>
            <p>The python code generated when creating a <parmname>GetNotes</parmname> action is as
                follows:<codeblock id="codeblock_xzp_pzl_fvb"># --------------------------------------------------------------------------------
# stubs for action ToDoGetNotes generated by Altair One content definition compiler.
# ToDoGetNotesPre  [optional] precheck and setup resources required for action.
# ToDoGetNotesRun  business logic of action and set outputs.
# ToDoGetNotesPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.todo import ToDoGetNotesInputs
from altair.todo import ToDoGetNotesOutputs


async def ToDoGetNotesRun(inputs: ToDoGetNotesInputs, outputs: ToDoGetNotesOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (ToDoGetNotesInputs): action inputs
        outputs (ToDoGetNotesOutputs): action outputs
        context (ActionContext): action context
    '''
    notes = await inputs.thisContent.getNotes()
    outputs.notes = notes
    pass</codeblock></p>
        </section>
    </refbody>
</reference>
